class NumerusApp {
    constructor() {
        this.baseURL = '';
        this.currentAnalysis = null;
        this.init();
    }

    init() {
        this.setupEventListeners();
        this.loadSystems();
        this.loadMetrics();
        this.initSmoothScrolling();
        this.initMobileMenu();
    }

    setupEventListeners() {
        const form = document.getElementById('numerologyForm');
        const exportBtn = document.getElementById('exportHTML');
        const shareBtn = document.getElementById('shareResult');

        if (form) {
            form.addEventListener('submit', (e) => this.handleAnalyze(e));
        }

        if (exportBtn) {
            exportBtn.addEventListener('click', () => this.exportHTML());
        }

        if (shareBtn) {
            shareBtn.addEventListener('click', () => this.shareResult());
        }
    }

    async loadSystems() {
        try {
            const response = await fetch('/v1/systems');
            const data = await response.json();
            this.renderSystems(data.systems);
        } catch (error) {
            console.error('Error loading systems:', error);
        }
    }

    renderSystems(systems) {
        const grid = document.getElementById('systemsGrid');
        if (!grid) return;

        const systemDescriptions = {
            'pythagorean': 'H·ªá th·ªëng ph·ªï bi·∫øn nh·∫•t, d·ª±a tr√™n c√°c nguy√™n t·∫Øc c·ªßa Pythagoras. S·ª≠ d·ª•ng s·ªë t·ª´ 1-9 ƒë·ªÉ ph√¢n t√≠ch t√≠nh c√°ch v√† v·∫≠n m·ªánh.',
            'chaldean': 'H·ªá th·ªëng c·ªï x∆∞a t·ª´ Babylon, ƒë∆∞·ª£c coi l√† ch√≠nh x√°c nh·∫•t. S·ª≠ d·ª•ng s·ªë t·ª´ 1-8, b·ªè qua s·ªë 9.',
            'hebrew_gematria': 'H·ªá th·ªëng truy·ªÅn th·ªëng Do Th√°i, g√°n gi√° tr·ªã s·ªë cho c√°c ch·ªØ c√°i Hebrew ƒë·ªÉ gi·∫£i th√≠ch √Ω nghƒ©a s√¢u xa.',
            'greek_isopsephy': 'H·ªá th·ªëng Hy L·∫°p c·ªï ƒë·∫°i, t∆∞∆°ng t·ª± Gematria nh∆∞ng s·ª≠ d·ª•ng b·∫£ng ch·ªØ c√°i Hy L·∫°p.',
            'arabic_abjad': 'H·ªá th·ªëng truy·ªÅn th·ªëng ·∫¢ R·∫≠p, s·ª≠ d·ª•ng gi√° tr·ªã s·ªë c·ªßa c√°c ch·ªØ c√°i ·∫¢ R·∫≠p ƒë·ªÉ ph√¢n t√≠ch.',
            'vietnamese_latin': 'H·ªá th·ªëng ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh ƒë·∫∑c bi·ªát cho ti·∫øng Vi·ªát, x·ª≠ l√Ω d·∫•u v√† k√Ω t·ª± ƒë·∫∑c bi·ªát.'
        };

        grid.innerHTML = systems.map(system => `
            <div class="system-card">
                <h3>${system.name}</h3>
                <p>${systemDescriptions[system.id] || 'H·ªá th·ªëng th·∫ßn s·ªë h·ªçc chuy√™n bi·ªát v·ªõi ph∆∞∆°ng ph√°p t√≠nh to√°n ƒë·ªôc ƒë√°o.'}</p>
                <div style="margin-top: 1rem; padding-top: 1rem; border-top: 1px solid #eee;">
                    <small style="color: #666;">ID: ${system.id}</small>
                </div>
            </div>
        `).join('');
    }

    async loadMetrics() {
        try {
            const response = await fetch('/v1/metrics');
            const data = await response.json();
            this.updateMetrics(data);
        } catch (error) {
            console.error('Error loading metrics:', error);
        }
    }

    updateMetrics(metrics) {
        const totalRequestsEl = document.getElementById('totalRequests');
        const successRateEl = document.getElementById('successRate');
        const avgResponseTimeEl = document.getElementById('avgResponseTime');

        if (totalRequestsEl) {
            totalRequestsEl.querySelector('.stat-number').textContent = 
                metrics.requests?.total || 0;
        }

        if (successRateEl) {
            successRateEl.querySelector('.stat-number').textContent = 
                (metrics.requests?.success_rate_percent || 0) + '%';
        }

        if (avgResponseTimeEl) {
            avgResponseTimeEl.querySelector('.stat-number').textContent = 
                Math.round(metrics.response_time_ms?.average || 0) + 'ms';
        }
    }

    async handleAnalyze(event) {
        event.preventDefault();
        
        const data = {
            full_name: document.getElementById('fullName').value,
            date_of_birth: document.getElementById('dateOfBirth').value,
            gender: document.getElementById('gender').value || null,
            system: document.getElementById('system').value,
            detailed: document.getElementById('detailed').checked
        };

        console.log('Analyzing with data:', data); // Debug log

        if (!data.full_name || !data.date_of_birth || !data.system) {
            this.showError('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc!');
            return;
        }

        this.showLoading(true);
        this.hideResults();

        try {
            const response = await fetch('/v1/analyze', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const result = await response.json();
            this.currentAnalysis = { data, result };
            this.showResults(result, data);
            this.loadMetrics(); // Refresh metrics

        } catch (error) {
            console.error('Analysis error:', error);
            this.showError('C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh ph√¢n t√≠ch. Vui l√≤ng th·ª≠ l·∫°i!');
        } finally {
            this.showLoading(false);
        }
    }

    showLoading(show) {
        const loading = document.getElementById('loading');
        if (loading) {
            loading.classList.toggle('hidden', !show);
        }
    }

    hideResults() {
        const results = document.getElementById('results');
        if (results) {
            results.classList.add('hidden');
        }
    }

    showResults(result, inputData) {
        const resultsDiv = document.getElementById('results');
        const contentDiv = document.getElementById('resultsContent');
        
        if (!resultsDiv || !contentDiv) return;

        // Create number cards
        const numbers = result.numbers;
        const numberCards = `
            <div class="number-cards">
                <div class="number-card">
                    <h4>üõ§Ô∏è S·ªë ƒê∆∞·ªùng ƒê·ªùi</h4>
                    <div class="number">${numbers.life_path}</div>
                    <p>Con ƒë∆∞·ªùng cu·ªôc ƒë·ªùi</p>
                </div>
                <div class="number-card">
                    <h4>üé≠ S·ªë Bi·ªÉu ƒê·∫°t</h4>
                    <div class="number">${numbers.expression}</div>
                    <p>C√°ch th·ªÉ hi·ªán b·∫£n th√¢n</p>
                </div>
                <div class="number-card">
                    <h4>üí´ S·ªë Linh H·ªìn</h4>
                    <div class="number">${numbers.soul_urge}</div>
                    <p>Khao kh√°t n·ªôi t√¢m</p>
                </div>
                <div class="number-card">
                    <h4>üéØ S·ªë C√° T√≠nh</h4>
                    <div class="number">${numbers.personality}</div>
                    <p>·∫§n t∆∞·ª£ng ƒë·∫ßu ti√™n</p>
                </div>
                <div class="number-card">
                    <h4>üåü S·ªë Tr∆∞·ªüng Th√†nh</h4>
                    <div class="number">${numbers.maturity}</div>
                    <p>M·ª•c ti√™u l·ªõn trong ƒë·ªùi</p>
                </div>
                <div class="number-card">
                    <h4>üìÖ NƒÉm C√° Nh√¢n</h4>
                    <div class="number">${numbers.personal_year}</div>
                    <p>NƒÉm ${new Date().getFullYear()}</p>
                </div>
            </div>
        `;

        let reportContent = '';
        if (result.report) {
            const sections = [
                { key: 'overview', title: 'üìã T·ªïng Quan', icon: 'üìã' },
                { key: 'life_path', title: 'üõ§Ô∏è ƒê∆∞·ªùng ƒê·ªùi', icon: 'üõ§Ô∏è' },
                { key: 'expression', title: 'üé≠ Bi·ªÉu ƒê·∫°t', icon: 'üé≠' },
                { key: 'soul_urge', title: 'üí´ Linh H·ªìn', icon: 'üí´' },
                { key: 'personality', title: 'üéØ C√° T√≠nh', icon: 'üéØ' },
                { key: 'challenges', title: '‚ö° Th·ª≠ Th√°ch', icon: '‚ö°' },
                { key: 'advice', title: 'üí° L·ªùi Khuy√™n', icon: 'üí°' }
            ];

            reportContent = sections
                .filter(section => result.report[section.key])
                .map(section => `
                    <div class="report-section">
                        <h4>${section.title}</h4>
                        <div class="report-content">${result.report[section.key]}</div>
                    </div>
                `).join('');
        }

        // Additional details
        const additionalInfo = `
            <div class="report-section">
                <h4>üî¢ Chi Ti·∫øt Kh√°c</h4>
                <div class="report-content">
                    <p><strong>H·ªá th·ªëng:</strong> ${result.system}</p>
                    <p><strong>ƒê·ªânh cao cu·ªôc ƒë·ªùi:</strong> ${numbers.pinnacles?.join(', ') || 'N/A'}</p>
                    <p><strong>Th·ª≠ th√°ch:</strong> ${numbers.challenges?.join(', ') || 'N/A'}</p>
                    ${numbers.karmic_lessons?.length ? `<p><strong>B√†i h·ªçc nghi·ªáp:</strong> ${numbers.karmic_lessons.join(', ')}</p>` : ''}
                </div>
            </div>
        `;

        contentDiv.innerHTML = `
            <div style="margin-bottom: 2rem;">
                <h4 style="color: var(--primary); margin-bottom: 1rem;">üéØ K·∫øt qu·∫£ cho: ${inputData.full_name}</h4>
                <p style="color: #666;">Ng√†y sinh: ${inputData.date_of_birth} | H·ªá th·ªëng: ${result.system}</p>
            </div>
            ${numberCards}
            ${reportContent}
            ${additionalInfo}
        `;

        resultsDiv.classList.remove('hidden');
        resultsDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }

    async exportHTML() {
        if (!this.currentAnalysis) {
            this.showError('Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t!');
            return;
        }

        try {
            const response = await fetch('/v1/export', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(this.currentAnalysis.data)
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const htmlContent = await response.text();
            
            // Create and download file
            const blob = new Blob([htmlContent], { type: 'text/html' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `numerology-report-${this.currentAnalysis.data.full_name.replace(/\s+/g, '-')}.html`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);

            this.showSuccess('B√°o c√°o HTML ƒë√£ ƒë∆∞·ª£c t·∫£i xu·ªëng!');

        } catch (error) {
            console.error('Export error:', error);
            this.showError('C√≥ l·ªói x·∫£y ra khi xu·∫•t b√°o c√°o!');
        }
    }

    shareResult() {
        if (!this.currentAnalysis) {
            this.showError('Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ chia s·∫ª!');
            return;
        }

        const result = this.currentAnalysis.result;
        const data = this.currentAnalysis.data;
        const numbers = result.numbers;

        const shareText = `üî¢ K·∫øt qu·∫£ th·∫ßn s·ªë h·ªçc c·ªßa ${data.full_name}:
üõ§Ô∏è S·ªë ƒê∆∞·ªùng ƒê·ªùi: ${numbers.life_path}
üé≠ S·ªë Bi·ªÉu ƒê·∫°t: ${numbers.expression}
üí´ S·ªë Linh H·ªìn: ${numbers.soul_urge}
üéØ S·ªë C√° T√≠nh: ${numbers.personality}

Ph√¢n t√≠ch b·∫±ng Numerus - ·ª®ng d·ª•ng th·∫ßn s·ªë h·ªçc chuy√™n nghi·ªáp`;

        if (navigator.share) {
            navigator.share({
                title: 'K·∫øt qu·∫£ Th·∫ßn S·ªë H·ªçc',
                text: shareText,
                url: window.location.href
            }).catch(console.error);
        } else {
            // Fallback: copy to clipboard
            navigator.clipboard.writeText(shareText).then(() => {
                this.showSuccess('ƒê√£ sao ch√©p k·∫øt qu·∫£ v√†o clipboard!');
            }).catch(() => {
                this.showError('Kh√¥ng th·ªÉ sao ch√©p. Vui l√≤ng th·ª≠ l·∫°i!');
            });
        }
    }

    showError(message) {
        this.showNotification(message, 'error');
    }

    showSuccess(message) {
        this.showNotification(message, 'success');
    }

    showNotification(message, type = 'info') {
        // Remove existing notifications
        const existing = document.querySelectorAll('.notification');
        existing.forEach(el => el.remove());

        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            color: white;
            font-weight: 600;
            z-index: 10000;
            animation: slideInRight 0.3s ease-out;
            max-width: 400px;
        `;

        switch (type) {
            case 'success':
                notification.style.background = 'var(--accent)';
                break;
            case 'error':
                notification.style.background = 'var(--danger)';
                break;
            default:
                notification.style.background = 'var(--info)';
        }

        notification.textContent = message;
        document.body.appendChild(notification);

        setTimeout(() => {
            notification.style.animation = 'slideOutRight 0.3s ease-out';
            setTimeout(() => notification.remove(), 300);
        }, 4000);
    }

    initSmoothScrolling() {
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });
    }

    initMobileMenu() {
        const hamburger = document.querySelector('.hamburger');
        const navMenu = document.querySelector('.nav-menu');

        if (hamburger && navMenu) {
            hamburger.addEventListener('click', () => {
                hamburger.classList.toggle('active');
                navMenu.classList.toggle('active');
            });

            // Close menu when clicking on a link
            document.querySelectorAll('.nav-link').forEach(link => {
                link.addEventListener('click', () => {
                    hamburger.classList.remove('active');
                    navMenu.classList.remove('active');
                });
            });
        }
    }
}

// Additional CSS for animations
const style = document.createElement('style');
style.textContent = `
    @keyframes slideInRight {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
    
    @keyframes slideOutRight {
        from { transform: translateX(0); opacity: 1; }
        to { transform: translateX(100%); opacity: 0; }
    }

    .hamburger.active span:nth-child(1) {
        transform: rotate(-45deg) translate(-5px, 6px);
    }
    
    .hamburger.active span:nth-child(2) {
        opacity: 0;
    }
    
    .hamburger.active span:nth-child(3) {
        transform: rotate(45deg) translate(-5px, -6px);
    }
`;
document.head.appendChild(style);

// Initialize app when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    window.numerusApp = new NumerusApp();
});

// Auto refresh metrics every 30 seconds
setInterval(() => {
    if (window.numerusApp) {
        window.numerusApp.loadMetrics();
    }
}, 30000);